// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid()) // Unique identifier
  username        String  @unique // Username, must be unique
  fullName        String // Full name of the user
  email           String  @unique // Email, must be unique
  password        String // User's hashed password
  bio             String? // Optional bio
  profileImageURL String? // Optional profile image URL

  isVerified Boolean // Is the user's email verified?

  verificationToken          String? // Verification token for email
  verificationTokenExpiresAt DateTime? // Expiry of verification token

  resetPasswordToken          String?   @unique // Reset password token
  resetPasswordTokenExpiresAt DateTime? // Expiry of reset password token

  createdAt DateTime @default(now()) // User creation timestamp
  updatedAt DateTime @updatedAt // Auto-updated timestamp

  tracks Track[] // Relation: tracks authored by the user
  likes  Like[] // Relation to track likes by this user

  // Relations to Followers and Followings through the Follow model
  followings       Follow[]  @relation("Follower")  // Users this user is following
  followers       Follow[]  @relation("Following")  // Users following this user
}

model Track {
  id            String   @id @default(cuid()) // Unique identifier
  title         String // Track title
  artist        String? // Name of the artist or band
  duration      String // Duration of the track in seconds
  coverImageUrl String? // Optional URL to the cover image
  audioFileUrl  String // URL to the audio file
  createdAt     DateTime @default(now()) // Track creation timestamp
  updatedAt     DateTime @updatedAt // Auto-updated timestamp

  likes Like[] // Relation to track likes on this post

  authorId String // Foreign key for the User
  author   User   @relation(fields: [authorId], references: [id]) // Relation to User model
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String

  createdAt DateTime @default(now())

  @@unique([userId, trackId]) // Ensure that a user can like a post only once
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String

  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Ensure a user cannot follow the same user multiple times
  @@index([followerId])  // Index for fast lookup of follows by followerId
  @@index([followingId]) // Index for fast lookup of follows by followingId
}
